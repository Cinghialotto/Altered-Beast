******************************************************************************
	; copy current animation frame to sprite pointers
	; entered with X sprite number

SPRITECOPY	LDA	PLOTC	; plot counter
	CLC
	ADC	#1
	AND	#3
	STA	PLOTC
	TAY
	LDA	PLOTWHATH,Y
	PHA
	LDA	PLOTWHATL,Y
	PHA
	LDX	WHATINDEX,Y
	RTS

WHATINDEX	DB	0,0,1,1
PLOTWHATL	DB	>WACKER-1,>SECONDT-1,>WACKER-1,>SECONDT-1
PLOTWHATH	DB	<WACKER-1,<SECONDT-1,<WACKER-1,<SECONDT-1

WACKER	LDA	ADD,X	; this more for sprites
	STA	NADD,X	; temp as move in second plot
	LDA	#0	; dont use add again so blank out
	STA	ADD,X
	LDA	SEE,X	; is =0 first set shown on
	BEQ	PLOTINSEC	; screen so plot to second set

	LDA	SPRMEM1LO,X	; get memory to store to first
	STA	POINTER1	; for each of six sprites / man
	LDA	SPRMEM1HI,X
	STA	POINTER1+1
	LDA	SPRMEM1LO+2,X
	STA	POINTER2
	LDA	SPRMEM1HI+2,X
	STA	POINTER2+1
	LDA	SPRMEM1LO+4,X
	STA	POINTER3
	LDA	SPRMEM1HI+4,X
	STA	POINTER3+1
	LDA	SPRMEM1LO+6,X
	STA	POINTER4
	LDA	SPRMEM1HI+6,X
	STA	POINTER4+1
	LDA	SPRMEM1LO+8,X
	STA	POINTER5
	LDA	SPRMEM1HI+8,X
	STA	POINTER5+1
	LDA	SPRMEM1LO+10,X
	STA	POINTER6
	LDA	SPRMEM1HI+10,X
	STA	POINTER6+1
	JMP	FIRSTSET

PLOTINSEC	LDA	SPRMEM2LO,X	; get memory to store to first
	STA	POINTER1	; for each of six sprites / man
	LDA	SPRMEM2HI,X
	STA	POINTER1+1
	LDA	SPRMEM2LO+2,X
	STA	POINTER2
	LDA	SPRMEM2HI+2,X
	STA	POINTER2+1
	LDA	SPRMEM2LO+4,X
	STA	POINTER3
	LDA	SPRMEM2HI+4,X
	STA	POINTER3+1
	LDA	SPRMEM2LO+6,X
	STA	POINTER4
	LDA	SPRMEM2HI+6,X
	STA	POINTER4+1
	LDA	SPRMEM2LO+8,X
	STA	POINTER5
	LDA	SPRMEM2HI+8,X
	STA	POINTER5+1
	LDA	SPRMEM2LO+10,X
	STA	POINTER6
	LDA	SPRMEM2HI+10,X
	STA	POINTER6+1

FIRSTSET	STX	XTEMP
	LDY	FRAME,X	; amimation frame

	LDX	TOPLEFT,Y	; sprite number
	LDA	SPRITELO,X	; where to poke to
	STA	COPY1	; low byte
	LDA	SPRITEHI,X
	STA	COPY1+1	; high byte

	LDX	MIDDLELEFT,Y	; sprite number
	LDA	SPRITELO,X	; where to poke to
	STA	COPY2	; low byte
	LDA	SPRITEHI,X
	STA	COPY2+1	; high byte

	LDX	BOTTOMLEFT,Y	; sprite number
	LDA	SPRITELO,X	; where to poke to
	STA	COPY3	; low byte
	LDA	SPRITEHI,X
	STA	COPY3+1	; high byte

	LDX	TOPRIGHT,Y	; sprite number
	LDA	SPRITELO,X	; where to poke to
	STA	COPY4	; low byte
	LDA	SPRITEHI,X
	STA	COPY4+1	; high byte

	LDX	MIDDLERIGHT,Y	; sprite number
	LDA	SPRITELO,X	; where to poke to
	STA	COPY5	; low byte
	LDA	SPRITEHI,X
	STA	COPY5+1	; high byte

	LDX	BOTTOMRIGHT,Y	; sprite number
	LDA	SPRITELO,X	; where to poke to
	STA	COPY6	; low byte
	LDA	SPRITEHI,X
	STA	COPY6+1	; high byte

	LDX	XTEMP
	STX	SECONDT+1
	LDA	DIR,X	; direction faceing
	STA	LASTDIR+1
	BNE	REVERD
	LDX	#0
	LDY	#0
	JSR	NORWAY
	LDX	#2
	LDY	#2
	JSR	NORWAY
	LDX	#4
	LDY	#4
	JMP	NORWAY

REVERD	LDX	#0
	LDY	#6
	JSR	RVSED
	LDX	#2
	LDY	#8
	JSR	RVSED
	LDX	#4
	LDY	#10
	JMP	RVSED

SECONDT	LDX	#255
	STX	XTEMP
LASTDIR	LDA	#255
	BNE	LASTREV
	LDX	#6
	LDY	#6
	JSR	NORWAY
	LDX	#8
	LDY	#8
	JSR	NORWAY
	LDX	#10
	LDY	#10
	JSR	NORWAY
	JMP	COPYIED	; update new sprite pointers

LASTREV	LDX	#6
	LDY	#0
	JSR	RVSED
	LDX	#8
	LDY	#2
	JSR	RVSED
	LDX	#10
	LDY	#4
	JSR	RVSED
COPYIED	LDX	XTEMP
	LDA	SEE,X	; no swap seen pointers
	EOR	#6	; to point to new
	STA	SEE,X	; sprite sets
JUSTADD	LDA	X,X	; move cord after
	CLC
	ADC	NADD,X	; add to x cord
	STA	X,X
	LDA	DIR,X
	BEQ	RIGHTF
	LDA	X,X
	CMP	#&E0
	BCS	SETLEFTS
	LDA	MINLEFT,X	; min left
	JMP	COMPIT
RIGHTF	LDA	MINRIGHT,X	; min when face right
COMPIT	CMP	X,X
	BCC	MOBACKT
SECDUP	STA	X,X
MOBACKT	LDA	#0	; wipe off add so move once
	STA	NADD,X
	RTS
SETLEFTS	LDA	MINLEFT,X
	JMP	SECDUP

MINLEFT	DB	6+2,6
MINRIGHT	DB	12+2,12

	; reverse plot 1 sprite
RVSED	LDA	COPY1,X
	STA	COPY
	LDA	COPY1+1,X
	STA	COPY+1
	LDA	POINTER1,Y
	STA	POINTER
	LDA	POINTER1+1,Y
	STA	POINTER+1

	LDA	#21
	STA	YTEMP
	LDY	#0
L1	LDA	(COPY),Y
	TAX
	LDA	REVERSETABLE,X
	INY			; 1
	INY			; 2
	STA	(POINTER),Y
	LDA	(COPY),Y
	TAX
	LDA	REVERSETABLE,X
	DEY			; 1
	DEY			; 0
	STA	(POINTER),Y
	INY			; 1
	LDA	(COPY),Y
	TAX
	LDA	REVERSETABLE,X
	STA	(POINTER),Y
	INY			; 2
	INY			; 3
	DEC	YTEMP
	BNE	L1
	RTS

	; normal plot 1 sprite
NORWAY	LDA	COPY1,X
	STA	COPY
	LDA	COPY1+1,X
	STA	COPY+1
	LDA	POINTER1,Y
	STA	POINTER
	LDA	POINTER1+1,Y
	STA	POINTER+1
	LDY	#62	; 62
L	LDA	(COPY),Y
	STA	(POINTER),Y
	DEY		; 61
	BPL	L
	RTS

SPST1A	EQU	&C000	; start of men sprites
SPST1B	EQU	SPST1A+(6*64)	; other place can be at

SPST2A	EQU	SPST1A+(12*64)	; other one start
SPST2B	EQU	SPST2A+(6*64)	; other place can be at

SPRMEM1LO	DB	>SPST1A,>SPST2A
	DB	>(SPST1A+64),>(SPST2A+64)
	DB	>(SPST1A+128),>(SPST2A+128)
	DB	>(SPST1A+128+64),>(SPST2A+128+64)
	DB	>(SPST1A+256),>(SPST2A+256)
	DB	>(SPST1A+256+64),>(SPST2A+256+64)

SPRMEM1HI	DB	<SPST1A,<SPST2A
	DB	<(SPST1A+64),<(SPST2A+64)
	DB	<(SPST1A+128),<(SPST2A+128)
	DB	<(SPST1A+128+64),<(SPST2A+128+64)
	DB	<(SPST1A+256),<(SPST2A+256)
	DB	<(SPST1A+256+64),<(SPST2A+256+64)

SPRMEM2LO	DB	>SPST1B,>SPST2B
	DB	>(SPST1B+64),>(SPST2B+64)
	DB	>(SPST1B+128),>(SPST2B+128)
	DB	>(SPST1B+128+64),>(SPST2B+128+64)
	DB	>(SPST1B+128+128),>(SPST2B+128+128)
	DB	>(SPST1B+256+64),>(SPST2B+256+64)

SPRMEM2HI	DB	<SPST1B,<SPST2B
	DB	<(SPST1B+64),<(SPST2B+64)
	DB	<(SPST1B+128),<(SPST2B+128)
	DB	<(SPST1B+128+64),<(SPST2B+128+64)
	DB	<(SPST1B+128+128),<(SPST2B+128+128)
	DB	<(SPST1B+256+64),<(SPST2B+256+64)

REVERSETABLE
	HEX	004080C0105090D02060A0E03070B0F0
	HEX	044484C4145494D42464A4E43474B4F4
	HEX	084888C8185898D82868A8E83878B8F8
	HEX	0C4C8CCC1C5C9CDC2C6CACEC3C7CBCFC
	HEX	014181C1115191D12161A1E13171B1F1
	HEX	054585C5155595D52565A5E53575B5F5
	HEX	094989C9195999D92969A9E93979B9F9
	HEX	0D4D8DCD1D5D9DDD2D6DADED3D7DBDFD
	HEX	024282C2125292D22262A2E23272B2F2
	HEX	064686C6165696D62666A6E63676B6F6
	HEX	0A4A8ACA1A5A9ADA2A6AAAEA3A7ABAFA
	HEX	0E4E8ECE1E5E9EDE2E6EAEEE3E7EBEFE
	HEX	034383C3135393D32363A3E33373B3F3
	HEX	074787C7175797D72767A7E73777B7F7
	HEX	0B4B8BCB1B5B9BDB2B6BABEB3B7BBBFB
	HEX	0F4F8FCF1F5F9FDF2F6FAFEF3F7FBFFF


